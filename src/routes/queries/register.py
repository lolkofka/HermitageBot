import re
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import config

register_router = Router()

months = [
    "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä–µ–ª—è",
    "–º–∞—è",
    "–∏—é–Ω—è",
    "–∏—é–ª—è",
    "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫–∞–±—Ä—è"
]

weekdays = [
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–≤—Ç–æ—Ä–Ω–∏–∫",
    "—Å—Ä–µ–¥–∞",
    "—á–µ—Ç–≤–µ—Ä–≥",
    "–ø—è—Ç–Ω–∏—Ü–∞",
    "—Å—É–±–±–æ—Ç–∞",
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
]


@register_router.callback_query(F.data == 'register')
async def register(query: CallbackQuery) -> None:
    await query.answer()
    builder = InlineKeyboardBuilder()

    today = datetime.now()

    for i in range(8):
        day = today + timedelta(days=i)
        builder.button(
            text=f'{day.strftime("%d")} {months[day.month]} {day.strftime("%Y")} ({weekdays[day.weekday()]})',
            callback_data=f'register_{day.strftime("%d.%m.%Y")}')

    builder.adjust(1, repeat=True)
    await query.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º—É–∑–µ–π</b>', reply_markup=builder.as_markup())


@register_router.callback_query(F.data.regexp(re.compile(r'^register_(\d{1,2}\.\d{1,2}\.\d{4})$')).as_('match'))
async def register_time(query: CallbackQuery, match: re.Match[str]) -> None:
    day = match.group(1)

    builder = InlineKeyboardBuilder()

    for i in range(12):
        time = f'{i + 9:02}:00'
        builder.button(text=time, callback_data=f'register_{day}_{time}')

    builder.adjust(2, repeat=True)

    await query.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞</b>', reply_markup=builder.as_markup())


@register_router.callback_query(
    F.data.regexp(re.compile(r'^register_(\d{1,2}\.\d{1,2}\.\d{4})_(\d{2}:\d{2})$')).as_('match'))
async def register_complete(query: CallbackQuery, match: re.Match[str]) -> None:
    day, time = match.group(1, 2)

    await query.message.delete()
    await query.answer(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {day} {time}!', show_alert=True)

    identity = ''

    if query.from_user.username:
        identity = f'@{query.from_user.username}'

    names = [item for item in [query.from_user.last_name, query.from_user.first_name] if item]

    if len(names) > 0:
        identity += f' ({" ".join(names)})'

    identity += f" [<code>{query.from_user.id}</code>]"

    for admin in config.admins:
        await query.bot.send_message(admin, 'üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n'
                                            '\n'
                                            f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {identity}\n'
                                            f'üìÜ –î–∞—Ç–∞: {day}\n'
                                            f'üïú –í—Ä–µ–º—è: {time}\n')
